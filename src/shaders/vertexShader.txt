#version 400 core

in vec3 vertices;
in vec2 textures;
in vec3 normals;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

out vec2 tex_coords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

const float density = 0.007;
const float gradient = 1.5;

void main() {

        tex_coords = textures;
        vec4 worldPosition = transformationMatrix * vec4(vertices, 1);
        vec4 positionRelativeToCam = viewMatrix * worldPosition;
        gl_Position = projectionMatrix * positionRelativeToCam;

        surfaceNormal = (transformationMatrix * vec4(normals, 0)).xyz;
        toLightVector = lightPosition - worldPosition.xyz;
        toCameraVector = (inverse(viewMatrix) * vec4(0, 0, 0, 1)).xyz - worldPosition.xyz;

        float distance = length(positionRelativeToCam.xyz);
        visibility = exp(-pow((distance*density), gradient));
        visibility = clamp(visibility, 0.0, 1.0);
}